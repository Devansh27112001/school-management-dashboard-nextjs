// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  image     String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  birthday  DateTime
  // The parent will be a Parent object and the student can have only one parent which will be addressed by parentId which is a foreign key to the Parent object
  parentId  String
  parent    Parent   @relation(fields: [parentId], references: [id])

  classId Int
  Class   Class @relation(fields: [classId], references: [id])

  gradeId Int
  Grade   Grade @relation(fields: [gradeId], references: [id])

  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  // A Parent can have multiple students so it is a students array
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes  Class[]
}

model Class {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  capacity     Int
  supervisorId String?
  supervisor   Teacher? @relation(fields: [supervisorId], references: [id])

  // Each class can have multiple lessons and students
  lessons  Lesson[]
  students Student[]

  gradeId       Int
  Grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  // Each subject can have multiple teachers and lessons
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime
  // However, each lesson belongs to only one subject.
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])

  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  results Result[]
}

model Result {
  id     Int   @id @default(autoincrement())
  score  Int
  examId Int?
  exam   Exam? @relation(fields: [examId], references: [id])

  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])

  studentId String
  Student   Student @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  lessonId Int
  Lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
